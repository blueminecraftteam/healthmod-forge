buildscript {
    repositories {
        maven {
            url = "https://files.minecraftforge.net/maven"
        }

        maven {
            url = "https://dl.bintray.com/kotlin/kotlin-eap"
        }

        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.kotlin_version}"
    }
}

plugins {
    id "net.minecrell.licenser" version "0.4.1"
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "kotlin"
apply plugin: "idea"
apply plugin: "maven-publish"

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.

println("Java: ${System.getProperty("java.version")}, JVM: ${System.getProperty("java.vm.version")}(${System.getProperty("java.vendor")}), Arch: ${System.getProperty("os.arch")}")

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable
    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"

            mods {
                healthmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"

            mods {
                healthmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"

            args "--mod", project.modid, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                healthmod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Kotlin for Forge"
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }

    maven {
        url = "https://dl.bintray.com/kotlin/kotlin-eap"
    }
    
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${project.kotlin_version}"
    implementation "thedarkcolour:kotlinforforge:${project.kotlin_for_forge_version}"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

license {
    header = rootProject.file("LICENSE_HEADER.txt")

    ext {
        name = "Team Blue"
        years = "2021"
        projectName = project.projectName
    }

    include("**/*.java")
    include("**/*.kt")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : project.author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : project.author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy("reobfJar")

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

build.dependsOn sourcesJar

artifacts {
    archives sourcesJar
}

// Process resources on build
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "META-INF/mods.toml"

        // Replace version
        expand "version": project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude "META-INF/mods.toml"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

